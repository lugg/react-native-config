import java.util.regex.Matcher
import java.util.regex.Pattern

def getCurrentFlavor() {
    Gradle gradle = getGradle()

    // match optional modules followed by the task
    // (?:.*:)* is a non-capturing group to skip any :foo:bar: if they exist
    // *[a-z]+([A-Za-z]+) will capture the flavor part of the task name onward (e.g., assembleRelease --> Release)
    def pattern = Pattern.compile("(?:.*:)*[a-z]+([A-Z][A-Za-z0-9]+)")
    def flavor = ""

    gradle.getStartParameter().getTaskNames().any { name ->
        Matcher matcher = pattern.matcher(name)
        if (matcher.find()) {
            flavor = matcher.group(1).toLowerCase()
            return true
        }
    }

    return flavor
}

def loadDotEnv(flavor = getCurrentFlavor()) {

    def envFile = project.hasProperty("defaultEnvFile") ? project.defaultEnvFile : ".env"
    if (System.env['ENVFILE']) {
        envFile = System.env['ENVFILE']
    } else if (System.getProperty('ENVFILE')) {
        envFile = System.getProperty('ENVFILE')
    } else if (project.hasProperty("envConfigFiles")) {
        // use startsWith because sometimes the task is "generateDebugSources", so we want to match "debug"
        project.ext.envConfigFiles.any { pair ->
            if (flavor.startsWith(pair.key.toLowerCase())) {
                envFile = pair.value
                return true
            }
        }
    }

    def env = [:]
    println("Reading env from: $envFile")

    File f = new File("$project.rootDir/../$envFile");
    if (!f.exists()) {
        f = new File("$envFile");
    }

    if (f.exists()) {
        f.eachLine { line ->
            // https://regex101.com/r/cbm5Tp/1
            def matcher = (line =~ /^\s*(?:export\s+|)([\w\d\.\-_]+)\s*=\s*['"]?(.*?)?['"]?\s*$/)
            // TODO: Fail Android builds if line doesn't match
            if (matcher.getCount() == 1 && matcher[0].size() == 3) {
                env.put(matcher[0][1], matcher[0][2].replace('"', '\\"'))
            }
        }
    } else {
        println("**************************")
        println("*** Missing .env file ****")
        println("**************************")
    }

    project.ext.set("env", env)
}

loadDotEnv()

def keyLength = 64

def generateKey(int keyLength = 64) {
    return new Random().with {
        (1..keyLength).collect {
            (('a'..'z')).join()[ nextInt((('a'..'z')).join().length())]
        }.join()
    }
}

/**
 * First uses a simple xor encryption on string using provided key
 * The resulting byte array is further encoded as base64 encoded string
 *
 * To decode the returned string you'd have to first Base64.decode(encodedString),
 * then xor decrypt the returned byte array (by applying this same xor encryption
 *       because when you apply it twice, you get back the original string),
 * then build a new string with the decrypted byte array: new String(resultBytes);
 *
 * @param str
 * @param key
 * @return
 */
def encodeString(String str, String key) {
    int len = str.length()
    int keyLen = key.length()

    byte[] strBytes = str.getBytes()
    byte[] keyBytes = key.getBytes()
    byte[] result = new byte[len]

    for (int i = 0; i < len; i++)
    {
        result[i] = (byte) (strBytes[i] ^ keyBytes[i % keyLen])
    }

    return result.encodeBase64().toString()
}

def escapeEncodedKeys(List encodedKeys) {
    def result = "{"
    encodedKeys.eachWithIndex { it, i ->
        if (i != encodedKeys.size()-1) {
            result += "\"$it\","
        } else {
            result += "\"$it\""
        }
    }
    result += "}"
    return result
}


android {
    defaultConfig {
        def encodedKeys = [] //needed to keep track of keys encoded
        String xorKey = generateKey(keyLength)
        project.env.each { k, v ->
            def escaped = v.replaceAll("%","\\\\u0025")
            def encodedValue = encodeString(v, xorKey)
            def encodedEscaped = encodeString(escaped, xorKey)

            buildConfigField "String", k, "\"$encodedValue\""
            buildConfigField "String", "XOR_KEY", "\"$xorKey\""

            resValue "string", k, "\"$encodedEscaped\""
            resValue "string", "XOR_KEY", "\"$xorKey\""

            encodedKeys << k
        }
        //Add the encodedkeys to buildconfig. Needed to know which var to decode
        def escapedKeys = escapeEncodedKeys(encodedKeys)
        buildConfigField "String[]", "ENCODED_KEYS", escapedKeys

    }
}

tasks.whenTaskAdded { task ->
    if (project.hasProperty("envConfigFiles")) {
        project.envConfigFiles.each { envConfigName, envConfigFile ->
            if (task.name.toLowerCase() == "generate"+envConfigName+"buildconfig") {
                task.doFirst() {
                    android.applicationVariants.all { variant ->
                        def variantConfigString = variant.getName()
                        if (envConfigName.contains(variantConfigString.toLowerCase())) {
                            loadDotEnv(envConfigName)

                            def encodedKeys = [] //needed to keep track of keys encoded
                            String xorKey = generateKey(keyLength)
                            project.env.each { k, v ->
                                def escaped = v.replaceAll("%","\\\\u0025")
                                def encodedValue = encodeString(v, xorKey)
                                def encodedEscaped = encodeString(escaped, xorKey)


                                variant.buildConfigField "String", k, "\"$encodedValue\""
                                variant.buildConfigField "String", "XOR_KEY", "\"$xorKey\""

                                variant.resValue "string", k, "\"$encodedEscaped\""
                                variant.resValue "string", "XOR_KEY", "\"$xorKey\""

                                encodedKeys << k
                            }
                            //Add the encodedkeys to buildconfig. Needed to know which var to decode
                            def escapedKeys = escapeEncodedKeys(encodedKeys)
                            variant.buildConfigField "String[]", "ENCODED_KEYS", escapedKeys
                        }
                    }
                }
            }
        }
    }
}
