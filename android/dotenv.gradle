def readDotEnv = {
    if (System.env['ENVFILE']) {
        def envFile = System.env['ENVFILE'];
        prepareEnvConfig(envFile)
    } else if (project.hasProperty("envConfigFiles")) {
        tasks.whenTaskAdded { task ->
            if (task.name ==~ /prepare.*Dependencies/) {
                def possibleFile = project.envConfigFiles.find {
                    task.name.equalsIgnoreCase("prepare" + it.key + "Dependencies")
                }?.value
                def envFile = possibleFile ?: ".env"
                def flavorName = task.name - "prepare" - "Dependencies"
                def newTaskName = "prepare" + flavorName + "EnvFile"
                project.task(newTaskName) {
                    doLast {
                        prepareEnvConfig(envFile)
                    }
                }
                task.dependsOn(newTaskName);
            }
        }
    } else {
        prepareEnvConfig(".env")
    }
}

private void prepareEnvConfig(envFile) {
    def env = [:]
    println("Reading env from: $envFile")
    try {
        new File("$project.rootDir/../$envFile").eachLine { line ->
            def matcher = (line =~ /^\s*([\w\d\.\-_]+)\s*=\s*(.*)?\s*$/)
            if (matcher.getCount() == 1 && matcher[0].size() == 3) {
                env.put(matcher[0][1], matcher[0][2])
            }
        }

    } catch (FileNotFoundException ex) {
        println("**************************")
        println("*** Missing .env file ****")
        println("**************************")
    }
    env.each {
        key, value ->
            def escaped = value.replaceAll("%", "\\\\u0025")
            android.defaultConfig.buildConfigField "String", key, "\"$value\""
            android.defaultConfig.resValue "string", key, "\"$escaped\""
    }
}

readDotEnv()
